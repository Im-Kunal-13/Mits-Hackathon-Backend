/* eslint-disable @typescript-eslint/no-explicit-any */
import '@stream-io/stream-chat-css/dist/css/index.css';
import React, { useEffect, useState } from 'react';
import { StreamChat } from 'stream-chat';
import { Channel, ChannelHeader, ChannelList, Chat, MessageList, useChannelStateContext, Window, } from '../index';
import { apiKey } from './utils';
var channelId = import.meta.env.E2E_ADD_MESSAGE_CHANNEL;
if (!channelId || typeof channelId !== 'string') {
    throw new Error('expected ADD_MESSAGE_CHANNEL');
}
var Controls = function () {
    var channel = useChannelStateContext().channel;
    return (React.createElement("div", null,
        React.createElement("button", { "data-testid": 'truncate', onClick: function () { return channel.truncate(); } }, "Truncate"),
        React.createElement("button", { "data-testid": 'add-message', onClick: function () {
                return channel.sendMessage({
                    text: 'Hello world!',
                });
            } }, "Add message")));
};
// Sort in reverse order to avoid auto-selecting unread channel
var sort = { last_updated: 1 };
var chatClient = StreamChat.getInstance(apiKey);
// wait for disconnect to happen since there's only one shared
// client and two separate Chat components using it to prevent crashes
var sharedPromise = Promise.resolve();
var ConnectedUser = function (_a) {
    var token = _a.token, userId = _a.userId;
    var _b = useState(false), connected = _b[0], setConnected = _b[1];
    useEffect(function () {
        sharedPromise.then(function () { return chatClient.connectUser({ id: userId }, token); });
        var handleConnectionChange = function (_a) {
            var _b = _a.online, online = _b === void 0 ? false : _b;
            setConnected(online);
        };
        chatClient.on('connection.changed', handleConnectionChange);
        return function () {
            chatClient.off('connection.changed', handleConnectionChange);
            sharedPromise = chatClient.disconnectUser();
        };
    }, []);
    if (!connected) {
        return React.createElement("p", null,
            "Connecting ",
            userId,
            "...");
    }
    return (React.createElement(React.Fragment, null,
        React.createElement("h3", null,
            "User: ",
            userId),
        React.createElement(Chat, { client: chatClient },
            React.createElement(ChannelList, { filters: { members: { $in: [userId] } }, sort: sort }),
            React.createElement(Channel, null,
                React.createElement(Window, null,
                    React.createElement(ChannelHeader, null),
                    React.createElement(MessageList, null),
                    React.createElement(Controls, null))))));
};
export var User1 = function () {
    var userId = import.meta.env.E2E_TEST_USER_1;
    var token = import.meta.env.E2E_TEST_USER_1_TOKEN;
    if (!userId || typeof userId !== 'string') {
        throw new Error('expected TEST_USER_1');
    }
    if (!token || typeof token !== 'string') {
        throw new Error('expected TEST_USER_1_TOKEN');
    }
    return React.createElement(ConnectedUser, { token: token, userId: userId });
};
export var User2 = function () {
    var userId = import.meta.env.E2E_TEST_USER_2;
    var token = import.meta.env.E2E_TEST_USER_2_TOKEN;
    if (!userId || typeof userId !== 'string') {
        throw new Error('expected TEST_USER_2');
    }
    if (!token || typeof token !== 'string') {
        throw new Error('expected TEST_USER_2_TOKEN');
    }
    return React.createElement(ConnectedUser, { token: token, userId: userId });
};
