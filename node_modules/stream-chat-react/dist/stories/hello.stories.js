/* eslint-disable @typescript-eslint/no-explicit-any */
import '@stream-io/stream-chat-css/dist/css/index.css';
import React, { useEffect, useState } from 'react';
import { StreamChat } from 'stream-chat';
import { Channel, ChannelHeader, ChannelList, Chat, MessageInput, MessageList, Thread, Window, } from '../index';
import { apiKey } from './utils';
var channelId = import.meta.env.E2E_ADD_MESSAGE_CHANNEL;
var userId = import.meta.env.E2E_TEST_USER_1;
var token = import.meta.env.E2E_TEST_USER_1_TOKEN;
if (!channelId || typeof channelId !== 'string') {
    throw new Error('expected ADD_MESSAGE_CHANNEL');
}
// Sort in reverse order to avoid auto-selecting unread channel
var sort = { last_updated: 1 };
var filters = { members: { $in: [userId] }, type: 'messaging' };
var options = { limit: 10, presence: true, state: true };
var chatClient = StreamChat.getInstance(apiKey);
var sharedPromise = Promise.resolve();
export var BasicSetup = function () {
    var _a = useState(false), connected = _a[0], setConnected = _a[1];
    useEffect(function () {
        sharedPromise.then(function () { return chatClient.connectUser({ id: userId }, token); });
        var handleConnectionChange = function (_a) {
            var _b = _a.online, online = _b === void 0 ? false : _b;
            setConnected(online);
        };
        chatClient.on('connection.changed', handleConnectionChange);
        return function () {
            chatClient.off('connection.changed', handleConnectionChange);
            sharedPromise = chatClient.disconnectUser();
        };
    }, []);
    if (!connected) {
        return React.createElement("p", null,
            "Connecting ",
            userId,
            "...");
    }
    return (React.createElement(Chat, { client: chatClient },
        React.createElement(ChannelList, { filters: filters, options: options, showChannelSearch: true, sort: sort }),
        React.createElement(Channel, null,
            React.createElement(Window, null,
                React.createElement(ChannelHeader, null),
                React.createElement(MessageList, null),
                React.createElement(MessageInput, { focus: true })),
            React.createElement(Thread, null))));
};
